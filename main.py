from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from datetime import datetime, timedelta
import json
import os
import asyncio

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

WARRANTY_FILE = "warranties.json"

if not os.path.exists(WARRANTY_FILE):
    with open(WARRANTY_FILE, "w") as f:
        json.dump({}, f)

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="üìÖ –°–∫–∞—á–∞—Ç—å –ü–û"), KeyboardButton(text="‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")],
            [KeyboardButton(text="üìö FAQ –ø–æ MacBook"), KeyboardButton(text="üõ† –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ —Ä–µ–º–æ–Ω—Ç–æ–º")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    return keyboard

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_keyboard())

@router.message(lambda message: message.text.lower() == "–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏")
async def handle_activation_button(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏:")

@router.message(lambda message: message.text.lower() == "—Å—Ç–∞—Ç—É—Å")
async def handle_status_button(message: types.Message):
    await check_status(message)

@router.message(lambda message: message.text == "üìÖ –°–∫–∞—á–∞—Ç—å –ü–û")
async def download_software(message: types.Message):
    await message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –ü–û:\nhttps://drive.google.com/drive/folders/1DEJhKjVoX_Csh3OLn9tu28gqAXlnM9Nv?usp=share_link")

@router.message(lambda message: message.text == "‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
async def show_hotkeys(message: types.Message):
    text = (
        "‚å®Ô∏è <b>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ Mac</b>\n"
        "<b>1. –û—Å–Ω–æ–≤–Ω—ã–µ</b>\n"
        "‚åòCmd + C / V / X ‚Äî –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å / –í—Å—Ç–∞–≤–∏—Ç—å / –í—ã—Ä–µ–∑–∞—Ç—å\n"
        "‚åòCmd + Z / Shift + Z ‚Äî –û—Ç–º–µ–Ω–∞ / –í–µ—Ä–Ω—É—Ç—å\n"
        "‚åòCmd + A / F / P / S ‚Äî –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë / –ü–æ–∏—Å–∫ / –ü–µ—á–∞—Ç—å / –°–æ—Ö—Ä–∞–Ω–∏—Ç—å\n"
        "<b>2. –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º</b>\n"
        "‚åòCmd + B / I / U ‚Äî –ñ–∏—Ä–Ω—ã–π / –ö—É—Ä—Å–∏–≤ / –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π\n"
        "‚å•Option + ‚Üê/‚Üí ‚Äî –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º\n"
        "‚å•Option + Delete ‚Äî –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "Fn + Delete ‚Äî –£–¥–∞–ª–∏—Ç—å –≤–ø–µ—Ä—ë–¥\n"
        "<b>3. –û–∫–Ω–∞ –∏ –≤–∫–ª–∞–¥–∫–∏</b>\n"
        "‚åòCmd + W / T ‚Äî –ó–∞–∫—Ä—ã—Ç—å / –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞\n"
        "‚åòCmd + H / Tab / ~ ‚Äî –°–∫—Ä—ã—Ç—å / –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–æ–Ω\n"
        "<b>4. –°–∫—Ä–∏–Ω—à–æ—Ç—ã</b>\n"
        "‚åòCmd + Shift + 3 / 4 / 5 ‚Äî –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞\n"
        "<b>5. Finder</b>\n"
        "‚åòCmd + N ‚Äî –ù–æ–≤–æ–µ –æ–∫–Ω–æ\n"
        "‚åòCmd + Shift + N ‚Äî –ù–æ–≤–∞—è –ø–∞–ø–∫–∞\n"
        "‚åòCmd + Delete ‚Äî –í –∫–æ—Ä–∑–∏–Ω—É\n"
        "<b>6. –°–∏—Å—Ç–µ–º–Ω—ã–µ</b>\n"
        "‚åòCmd + Space ‚Äî Spotlight\n"
        "‚å•Option + ‚åòCmd + Esc ‚Äî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ\n"
        "<b>7. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ</b>\n"
        "‚åòCmd + Option + D ‚Äî –°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å Dock\n"
        "Control + ‚åòCmd + D ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"
    )
    await message.answer(text)

@router.message(lambda message: message.text == "üìö FAQ –ø–æ MacBook")
async def send_faq(message: types.Message):
    await message.answer(
        "üìö –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mac –æ—Ç Apple:\n"
        "üîó <a href='https://support.apple.com/ru-ru/mac'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ Apple</a>"
    )

@router.message(lambda message: message.text == "üõ† –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ —Ä–µ–º–æ–Ω—Ç–æ–º")
async def contact_for_repair(message: types.Message):
    await message.answer("üõ† –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–º–æ–Ω—Ç–∞ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @AntonPotur")

@router.message(lambda message: message.text.isdigit())
async def register_warranty(message: types.Message):
    user_id = str(message.from_user.id)
    purchase_id = message.text
    expire_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")

    with open(WARRANTY_FILE, "r+") as f:
        data = json.load(f)
        data[user_id] = {
            "purchase_id": purchase_id,
            "registered_at": datetime.now().strftime("%Y-%m-%d"),
            "expires_at": expire_date
        }
        f.seek(0)
        json.dump(data, f, indent=4)
        f.truncate()

    await message.answer(
        f"‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ{purchase_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expire_date}.\n"
        f"–ü—Ä–∏–º–µ—Ä—ã –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:\n"
       f"‚Äî 1. –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ãüíª\n\n* –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–ª–∏ —Ç–∞—á–ø–∞–¥.\n* –ü–µ—Ä–µ–≥—Ä–µ–≤ –∏ –≤–Ω–µ–∑–∞–ø–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –±—Ä–∞–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è.\n* –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å USB-–ø–æ—Ä—Ç–æ–≤ –∏–ª–∏ —Ä–∞–∑—ä—ë–º–∞ –∑–∞—Ä—è–¥–∫–∏.\n* –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã (–Ω–æ—É—Ç–±—É–∫ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è).\n\n‚Äî 2. –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞—Ç–∞—Ä–µ–µ–πü™´\n\n* –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ 30 –º–∏–Ω—É—Ç).\n* –ë–∞—Ç–∞—Ä–µ—è –Ω–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è –∏–ª–∏ –≤–∑–¥—É–ª–∞—Å—å.\n\n‚Äî –ù–µ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ —Å–ª—É—á–∞–∏‚ùå\n\n* –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑-–∑–∞ —É–¥–∞—Ä–∞, –≤–æ–¥—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n* –ü—Ä–æ–±–ª–µ–º—ã –∏–∑-–∑–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π.\n\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî —É –ø—Ä–æ–¥–∞–≤—Ü–∞.\n"
        f"üí°–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É! –î–µ–ª–∏–º—Å—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ tech-–Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ç–æ–ø–æ–≤—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–∞ –≥–∞–¥–∂–µ—Ç—ã‚ù§Ô∏è: @apoturaev"
    )

async def check_status(message: types.Message):
    user_id = str(message.from_user.id)

    try:
        with open(WARRANTY_FILE, "r") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await message.answer("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏.")
        return

    if user_id not in data:
        await message.answer("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏.")
        return

    warranty = data[user_id]
    expires = datetime.strptime(warranty["expires_at"], "%Y-%m-%d")
    now = datetime.now()

    if now <= expires:
        days_left = (expires - now).days
        await message.answer(
            f"üì¶ –ü–æ–∫—É–ø–∫–∞ ‚Ññ{warranty['purchase_id']}\n"
            f"‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {warranty['expires_at']} (–µ—â—ë {days_left} –¥–Ω.)"
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Ññ{warranty['purchase_id']} –∏—Å—Ç–µ–∫–ª–∞ {warranty['expires_at']}."
        )

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    setup_application(app, dp, bot=bot)
    web.run_app(app, host="0.0.0.0", port=PORT)
